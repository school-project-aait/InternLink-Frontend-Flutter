// Mocks generated by Mockito 5.4.5 from annotations
// in internlink_flutter_application/test/features/profile/application/profile_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:internlink_flutter_application/features/student/domain/entities/user_profile.dart'
    as _i3;
import 'package:internlink_flutter_application/features/student/domain/repositories/profile_repository.dart'
    as _i2;
import 'package:internlink_flutter_application/features/student/domain/usecases/delete_profile.dart'
    as _i7;
import 'package:internlink_flutter_application/features/student/domain/usecases/get_profile.dart'
    as _i4;
import 'package:internlink_flutter_application/features/student/domain/usecases/update_profile.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProfileRepository_0 extends _i1.SmartFake
    implements _i2.ProfileRepository {
  _FakeProfileRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserProfile_1 extends _i1.SmartFake implements _i3.UserProfile {
  _FakeUserProfile_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetProfile].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProfile extends _i1.Mock implements _i4.GetProfile {
  MockGetProfile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProfileRepository get repo => (super.noSuchMethod(
        Invocation.getter(#repo),
        returnValue: _FakeProfileRepository_0(
          this,
          Invocation.getter(#repo),
        ),
      ) as _i2.ProfileRepository);

  @override
  _i5.Future<_i3.UserProfile> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Future<_i3.UserProfile>.value(_FakeUserProfile_1(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i5.Future<_i3.UserProfile>);
}

/// A class which mocks [UpdateProfile].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProfile extends _i1.Mock implements _i6.UpdateProfile {
  MockUpdateProfile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProfileRepository get repo => (super.noSuchMethod(
        Invocation.getter(#repo),
        returnValue: _FakeProfileRepository_0(
          this,
          Invocation.getter(#repo),
        ),
      ) as _i2.ProfileRepository);

  @override
  _i5.Future<_i3.UserProfile> call(_i3.UserProfile? profile) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [profile],
        ),
        returnValue: _i5.Future<_i3.UserProfile>.value(_FakeUserProfile_1(
          this,
          Invocation.method(
            #call,
            [profile],
          ),
        )),
      ) as _i5.Future<_i3.UserProfile>);
}

/// A class which mocks [DeleteProfile].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProfile extends _i1.Mock implements _i7.DeleteProfile {
  MockDeleteProfile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProfileRepository get repo => (super.noSuchMethod(
        Invocation.getter(#repo),
        returnValue: _FakeProfileRepository_0(
          this,
          Invocation.getter(#repo),
        ),
      ) as _i2.ProfileRepository);

  @override
  _i5.Future<void> call(int? id) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
