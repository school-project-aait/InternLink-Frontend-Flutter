// Mocks generated by Mockito 5.4.5 from annotations
// in internlink_flutter_application/test/features/profile/widget/profile_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i5;
import 'package:internlink_flutter_application/features/student/domain/entities/user_profile.dart'
    as _i8;
import 'package:internlink_flutter_application/features/student/domain/usecases/delete_profile.dart'
    as _i4;
import 'package:internlink_flutter_application/features/student/domain/usecases/get_profile.dart'
    as _i2;
import 'package:internlink_flutter_application/features/student/domain/usecases/update_profile.dart'
    as _i3;
import 'package:internlink_flutter_application/features/student/presentation/providers/profile_provider.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:state_notifier/state_notifier.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetProfile_0 extends _i1.SmartFake implements _i2.GetProfile {
  _FakeGetProfile_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateProfile_1 extends _i1.SmartFake implements _i3.UpdateProfile {
  _FakeUpdateProfile_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteProfile_2 extends _i1.SmartFake implements _i4.DeleteProfile {
  _FakeDeleteProfile_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAsyncValue_3<T> extends _i1.SmartFake implements _i5.AsyncValue<T> {
  _FakeAsyncValue_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProfileNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileNotifier extends _i1.Mock implements _i6.ProfileNotifier {
  MockProfileNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetProfile get getProfile => (super.noSuchMethod(
        Invocation.getter(#getProfile),
        returnValue: _FakeGetProfile_0(
          this,
          Invocation.getter(#getProfile),
        ),
      ) as _i2.GetProfile);

  @override
  _i3.UpdateProfile get updateProfile => (super.noSuchMethod(
        Invocation.getter(#updateProfile),
        returnValue: _FakeUpdateProfile_1(
          this,
          Invocation.getter(#updateProfile),
        ),
      ) as _i3.UpdateProfile);

  @override
  _i4.DeleteProfile get deleteProfile => (super.noSuchMethod(
        Invocation.getter(#deleteProfile),
        returnValue: _FakeDeleteProfile_2(
          this,
          Invocation.getter(#deleteProfile),
        ),
      ) as _i4.DeleteProfile);

  @override
  set onError(_i5.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i7.Stream<_i5.AsyncValue<_i8.UserProfile?>> get stream =>
      (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i7.Stream<_i5.AsyncValue<_i8.UserProfile?>>.empty(),
      ) as _i7.Stream<_i5.AsyncValue<_i8.UserProfile?>>);

  @override
  _i5.AsyncValue<_i8.UserProfile?> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAsyncValue_3<_i8.UserProfile?>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.AsyncValue<_i8.UserProfile?>);

  @override
  set state(_i5.AsyncValue<_i8.UserProfile?>? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.AsyncValue<_i8.UserProfile?> get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeAsyncValue_3<_i8.UserProfile?>(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i5.AsyncValue<_i8.UserProfile?>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> loadProfile() => (super.noSuchMethod(
        Invocation.method(
          #loadProfile,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> update(_i8.UserProfile? updatedProfile) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [updatedProfile],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  bool updateShouldNotify(
    _i5.AsyncValue<_i8.UserProfile?>? old,
    _i5.AsyncValue<_i8.UserProfile?>? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i5.RemoveListener addListener(
    _i9.Listener<_i5.AsyncValue<_i8.UserProfile?>>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i5.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
