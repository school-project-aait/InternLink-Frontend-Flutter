import 'package:flutter_test/flutter_test.dart';
import 'package:internlink_flutter_application/core/utils/resource.dart';
import 'package:internlink_flutter_application/features/admin/data/repositories/internship_repository_impl.dart';
import 'package:internlink_flutter_application/features/admin/domain/entities/category.dart';
import 'package:mockito/mockito.dart';
import 'package:dio/dio.dart';

import '../../../../mocks.mocks.dart';
// import 'package:your_project_path/core/utils/resource.dart';
// import 'package:your_project_path/features/internships/data/datasources/remote/internship_api_service.dart';
// import 'package:your_project_path/features/internships/data/repositories/internship_repository_impl.dart';
// import 'package:your_project_path/features/internships/domain/entities/category.dart';

// import 'mocks.mocks.dart'; // auto-generated by mockito

void main() {
  late InternshipRepositoryImpl repository;
  late MockInternshipApiService mockApiService;

  setUp(() {
    mockApiService = MockInternshipApiService();
    repository = InternshipRepositoryImpl(mockApiService);
  });

  group('getCategories', () {
    test('returns ResourceSuccess when API call succeeds', () async {
      // Arrange
      final mockResponse = {
        'data': {
          'categories': [
            {'category_id': 1, 'category_name': 'Engineering'},
            {'category_id': 2, 'category_name': 'Marketing'},
          ]
        }
      };

      when(mockApiService.getDropdownData()).thenAnswer((_) async => mockResponse);

      // Act
      final result = await repository.getCategories();

      // Assert
      expect(result, isA<ResourceSuccess<List<Category>>>());
      final categories = (result as ResourceSuccess<List<Category>>).data;
      expect(categories.length, 2);
      expect(categories[0].name, 'Engineering');
    });

    test('returns ResourceError on DioException with 404', () async {
      when(mockApiService.getDropdownData()).thenThrow(
        DioException(
          requestOptions: RequestOptions(path: ''),
          response: Response(statusCode: 404, requestOptions: RequestOptions(path: '')),
          type: DioExceptionType.badResponse,
        ),
      );

      final result = await repository.getCategories();
      expect(result, isA<ResourceError>());
    });

    test('returns ResourceError on unexpected error', () async {
      when(mockApiService.getDropdownData()).thenThrow(Exception('Some error'));
      final result = await repository.getCategories();
      expect(result, isA<ResourceError>());
    });
  });
}
